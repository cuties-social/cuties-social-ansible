---
- name: Clone mastodon
  git:
    repo: "https://github.com/mastodon/mastodon.git"
    dest: "{{ mastodon_path }}"
    clone: true
    force: true
    version: "{{ mastodon_version }}"

- name: Bundle install
  shell: "~/.rbenv/shims/bundle install -j$(getconf _NPROCESSORS_ONLN) --deployment --without development test"
  args:
    chdir: "{{ mastodon_path }}"

- name: Yarn install
  command: yarn install --pure-lockfile
  args:
    chdir: "{{ mastodon_path }}"

- name: Install systemd sidekiq Service Files
  template:
    src: systemd/mastodon-sidekiq.service.j2
    dest: /etc/systemd/system/mastodon-sidekiq.service
  become: true
  become_user: root

- name: Install systemd web Service Files
  template:
    src: systemd/mastodon-web.service.j2
    dest: /etc/systemd/system/mastodon-web.service
  become: true
  become_user: root

- name: Install systemd streaming Service Files
  template:
    src: systemd/mastodon-streaming.service.j2
    dest: /etc/systemd/system/mastodon-streaming.service
  become: true
  become_user: root

- name: Install systemd elasticsearch-index Service Files
  template:
    src: systemd/mastodon-elasticsearch.service.j2
    dest: /etc/systemd/system/mastodon-elasticsearch.service
  become: true
  become_user: root
  register: elasticsearch_import_service


- name: Ensure mastodon-elasticsearch.service is enabled
  systemd:
    name: mastodon-elasticsearch.service
    daemon_reload: true # that isn't propperly idempotent but will work and I hate ansible a bit right now
    enabled: true
    masked: false
  when: mastodon_es_enabled

- name: Ensure mastodon-elasticsearch.service is not enabled
  systemd:
    name: mastodon-elasticsearch.service
    enabled: false
    masked: true
  when: not mastodon_es_enabled

- name: Media cleanup cronjob
  cron:
    name: "media cleanup"
    minute: "15"
    hour: "1"
    job: '/bin/bash -c ''export PATH="$HOME/.rbenv/bin:$PATH"; eval "$(rbenv init -)"; cd {{ mastodon_path }} && RAILS_ENV=production ./bin/tootctl media remove'''

- name: Install mastodon config
  template:
    src: mastodon/.env.production.j2
    dest: "{{ mastodon_path }}/.env.production"

- include_tasks: patches/main.yml
  when: mastodon_patches_enable

- name: Run pre-deployment migrations
  command:
    argv:
      - ~/.rbenv/shims/bundle
      - exec
      - rails
      - db:migrate
    chdir: "{{ mastodon_path }}"
  environment:
    SKIP_POST_DEPLOYMENT_MIGRATIONS: true
    RAILS_ENV: production

- name: Precompile assets
  shell: "RAILS_ENV=production ~/.rbenv/shims/bundle exec rails assets:precompile"
  args:
    chdir: "{{ mastodon_path }}"

- name: Create elasticsearch index
  shell: "RAILS_ENV=production ~/.rbenv/shims/bundle exec rake chewy:upgrade"
  args:
    chdir: "{{ mastodon_path }}"
  when: mastodon_es_enabled

- name: Enable and restart mastodon-web
  systemd:
    name: mastodon-web.service
    daemon_reload: yes
    state: restarted
    enabled: yes
  become: true
  become_user: root

- name: Enable and restart mastodon-streaming
  systemd:
    name: mastodon-streaming.service
    daemon_reload: yes
    state: restarted
    enabled: yes
  become: true
  become_user: root

- name: Enable and restart mastodon-sidekiq
  systemd:
    name: mastodon-sidekiq.service
    daemon_reload: yes
    state: restarted
    enabled: yes
  become: true
  become_user: root

- name: Clear cache
  command:
    argv:
      - bin/tootctl
      - cache
      - clear
    chdir: "{{ mastodon_path }}"
  environment:
    RAILS_ENV: production
    PATH: '{{ mastodon_home }}/.rbenv/shims:{{ ansible_env.PATH }}'

- name: Run post-deployment migrations
  command:
    argv:
      - ~/.rbenv/shims/bundle
      - exec
      - rails
      - db:migrate
    chdir: "{{ mastodon_path }}"
  environment:
    RAILS_ENV: production

- name: Import old statuses into eslasticsearch
  systemd:
    name: mastodon-elasticsearch.service
    state: restarted
  become: true
  become_user: root
  when: mastodon_es_enabled
